<?xml version="1.0" encoding="UTF-8"?>
<ViewConfig>
  <Arguments/>
  <Context/>
  <Model/>
  <View>
    <ClientEvent name="onReady" signature="self,arg,Chat">Chat.show();
</ClientEvent>
    <Property name="packages">font-awesome</Property>
    <Dialog id="Chat">
      <ClientEvent name="onCreateDom" signature="self,arg,dsUser,activeGroupList,userResult">var dom = $(arg.dom).find(&quot;.d-caption-bar.d-dialog-caption-bar&quot;)[0];
var userSearch = new dorado.widget.TextEditor({
	exClassName: &quot;user-search-txt&quot;
});
userSearch.render(dom);
$(dom).find(&quot;input&quot;).on(&quot;keydown&quot;, function(e) {
	var inputDom = this;
	if (e.keyCode === 13) {
		return;
	}
	window.clearTimeout(self.userQueryTask);
	self.userQueryTask = window.setTimeout(function(){
		var key = $(inputDom).val();
		if (key) {
			activeGroupList.set(&quot;visible&quot;, false);
			userResult.set(&quot;visible&quot;, true);
			dsUser.set(&quot;parameter&quot;, key).flushAsync();
		}
		else {
			activeGroupList.set(&quot;visible&quot;, true);
			userResult.set(&quot;visible&quot;, false);
		}
	}, 150);
});

</ClientEvent>
      <ClientEvent name="onCreate" signature="self,arg,dsActiveGroup,dsAG">self.noticeCount = 0;
self.onReceiveListeners = [];
self.addReceiveListener = function(l) {
	self.onReceiveListeners.push(l);
};
self.onReceive = function(socket, arg) {
	self.doReceiveNotice(socket, arg);
	self.onReceiveListeners.each(function(l) {
		l(self, {socket: socket, param: arg});
	});
};

self.connectNotifyServer = function() {
	self._noticeSocket = dorado.Socket.connect({
		service: &quot;noticeController#connectServer&quot;,
		parameter: &quot;${loginUsername}&quot;,
		onReceive: function(arg) {
			self.onReceive(view._notifySocket, arg)
		},
		onDisconnect: function() {

		}
	});
};

self.send = function(notice) {
	self._noticeSocket.send(notice.type, notice);
}

self.connectNotifyServer();

$(window).bind(&quot;beforeunload&quot;, function(){
	self._noticeSocket.disconnect();
	return;
});

self.doReceiveNotice = function(s, arg) {
	if(arg.type === &quot;message&quot;) {
		var groups = dsActiveGroup.getData();
		var group = null;
		groups.each(function(g) {
			if (g.get(&quot;id&quot;) === arg.data.groupId) {
				group = g;
				return false;
			}
		});
		
		var callback = function() {
			if (!group.noticeCount) {
				group.noticeCount = 0;
			}
			arg.data.$dataType = &quot;Notice&quot;;
			group.set(&quot;lastNotice&quot;, arg.data);
			delete arg.data.$dataType;
			group.createChild(&quot;notices&quot;, arg.data);
			
			if (groups.getFirst() !== group) {
				groups.insert(group, &quot;begin&quot;);
				group.setState(dorado.Entity.STATE_NONE);
			}
			if (arg.data.sender === &quot;${loginUsername}&quot;) {
				return;
			} else {
				self.noticeCount++;
				group.noticeCount++;
			}
			if (groups.refreshCountTask) {
				clearTimeout(group.refreshCountTask);
			}
			group.refreshCountTask = setTimeout(function() {
				var count = group.noticeCount > 99 ? &quot;99+&quot; : group.noticeCount;
				$(&quot;#group-count-&quot; + group.entityId).css(&quot;display&quot;, group.noticeCount ? &quot;inline-block&quot; : &quot;none&quot;).text(count);
				if (group.noticeCount) {
					var count = group.noticeCount > 99 ? &quot;99+&quot; : group.noticeCount;
					$(&quot;#group-count-&quot; + group.entityId).css(&quot;display&quot;, group.noticeCount ? &quot;inline-block&quot; : &quot;none&quot;).text(count);
					if (group.noticeCount > 9) {
						$(&quot;#group-count-&quot; + group.entityId).css(&quot;padding&quot;, &quot;2px 4px&quot;);
					} else {
						$(&quot;#group-count-&quot; + group.entityId).css(&quot;padding&quot;, &quot;2px&quot;);
					}
					
				}
			}, 80);
		};
		if (group) {
			callback();
		} else {
			dsAG.set(&quot;parameter&quot;, {
				groupId: arg.data.groupId,
				memberId: &quot;${loginUsername}&quot;
			}).flushAsync(function(data) {
				group = groups.insert(data.toJSON(), &quot;begin&quot;);
				callback();
			});
		}
		
	} else if (arg.type === &quot;mark-read&quot;) {
		var groups = dsActiveGroup.getData();
		groups.each(function(g) {
			if (g.get(&quot;id&quot;) === arg.data.groupId) {
				self.noticeCount -= g.noticeCount;
				g.noticeCount = 0;
				$(&quot;#group-count-&quot; + g.entityId).css(&quot;display&quot;, &quot;none&quot;);
				return false;
			}
		});
	}
};

</ClientEvent>
      <ClientEvent name="onClick" signature="self,arg,dsActiveGroup,Chat">var group = dsActiveGroup.getData(&quot;#&quot;);
if (group &amp;&amp; group.noticeCount > 0) {
	Chat.send({
		type: &quot;mark-read&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;)
	})

}

</ClientEvent>
      <Property name="modal">false</Property>
      <Property name="width">600</Property>
      <Property name="height">500</Property>
      <Property name="showCaptionBar">true</Property>
      <Property name="exClassName">chat</Property>
      <Property name="collapseable">true</Property>
      <Property name="minimizeable">true</Property>
      <Property name="maximizeable">true</Property>
      <Buttons/>
      <Children>
        <Container>
          <DataSet id="dsPLG">
            <Property name="dataType">ActiveGroup</Property>
            <Property name="dataProvider">groupController#loadPrivateLetterGroup</Property>
          </DataSet>
          <DataSet id="dsAG">
            <Property name="dataType">ActiveGroup</Property>
            <Property name="dataProvider">groupController#loadActiveGroup</Property>
          </DataSet>
          <DataSet id="dsUser">
            <Property name="dataType">[User]</Property>
            <Property name="dataProvider">noticeController#loadUsers</Property>
            <Property name="pageSize">10</Property>
            <Property name="loadMode">manual</Property>
          </DataSet>
          <DataSet id="dsActiveGroup">
            <Property name="dataType">[ActiveGroup]</Property>
            <Property name="dataProvider">groupController#loadActiveGroups</Property>
            <Property name="parameter">${loginUsername}</Property>
          </DataSet>
          <DataSet id="dsGroup">
            <Property name="dataType">[Group]</Property>
            <Property name="dataProvider">groupController#loadGroups</Property>
            <Property name="parameter">${loginUsername}</Property>
          </DataSet>
          <SplitPanel>
            <Property name="position">180</Property>
            <MainControl>
              <SplitPanel>
                <Property name="position">150</Property>
                <Property name="direction">bottom</Property>
                <MainControl>
                  <Container>
                    <Control id="yourTitle" layoutConstraint="top">
                      <Property name="exClassName">your-title</Property>
                    </Control>
                    <DataListBox>
                      <ClientEvent name="onRenderRow" signature="self,arg,dsActiveGroup">$(arg.dom).empty();
var my = arg.data.get(&quot;sender&quot;) === &quot;${loginUsername}&quot;;
var name = &quot;&quot;;
var tip = new dorado.widget.Tip({
	content: arg.data.get(&quot;content&quot;).replace(/\n/g, &quot;&lt;br>&quot;),
	floating: false,
	arrowDirection: my ? &quot;right&quot; : &quot;left&quot;,
	arrowAlign: &quot;top&quot;
});
var avatar = new dorado.widget.Control({
	exClassName: &quot;message-avatar &quot; + (my ? &quot;right&quot; : &quot;left&quot;)
});
if (my) {
	name = &quot;${loginUser.nickname}&quot;[0].toLocaleUpperCase();
} else {
	name = dsActiveGroup.getData(&quot;#.other.nickname&quot;)[0].toLocaleUpperCase();
}
$(avatar.getDom()).text(name);

avatar.render(arg.dom);
tip.render(arg.dom);
</ClientEvent>
                      <Property name="dataSet">dsActiveGroup</Property>
                      <Property name="dataPath">#.notices</Property>
                      <Property name="property">content</Property>
                      <Property name="highlightCurrentRow">false</Property>
                      <Property name="highlightHoverRow">false</Property>
                      <Property name="className">message-list</Property>
                    </DataListBox>
                  </Container>
                </MainControl>
                <SideControl>
                  <Container layout="padding:5">
                    <Container layout="hbox pack:start" layoutConstraint="top">
                      <Property name="height">30</Property>
                      <Control>
                        <Property name="exClassName">message-tool fa fa-smile-o</Property>
                      </Control>
                    </Container>
                    <TextArea>
                      <ClientEvent name="onKeyPress" signature="self,arg,dsActiveGroup,Chat">var content = self.get(&quot;value&quot;);
if (arg.keyCode === 13 &amp;&amp; content &amp;&amp; !arg.shiftKey) {
	var group = dsActiveGroup.getData(&quot;#&quot;);
	if (!group) {
		return;
	} 
	Chat.send({
		type: &quot;message&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;),
		all: group.get(&quot;all&quot;),
		content: content
	});
	self.set(&quot;value&quot;, null);
	arg.returnValue = false;
}</ClientEvent>
                      <ClientEvent name="onClick" signature="self,arg,dsActiveGroup,Chat">var group = dsActiveGroup.getData(&quot;#&quot;);
if (group &amp;&amp; group.noticeCount > 0) {
	Chat.send({
		type: &quot;mark-read&quot;,
		sender: &quot;${loginUsername}&quot;,
		groupId: group.get(&quot;id&quot;)
	})

}

</ClientEvent>
                      <Property name="exClassName">message-text-area</Property>
                    </TextArea>
                  </Container>
                </SideControl>
              </SplitPanel>
            </MainControl>
            <SideControl>
              <Container>
                <DataListBox id="activeGroupList">
                  <ClientEvent name="onRenderRow">$(arg.dom).empty();
var privateLetter = arg.data.get(&quot;privateLetter&quot;);
var n = &quot;&quot;;
var d = &quot;&quot;;
if (privateLetter) {
	n = arg.data.get(&quot;other&quot;).get(&quot;nickname&quot;);
} else {
	n = arg.data.get(&quot;name&quot;) || &quot;无&quot;;
}
if (arg.data.get(&quot;lastNotice&quot;)) {
	d = arg.data.get(&quot;lastNotice&quot;).get(&quot;content&quot;);
}

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

var count = new dorado.widget.Control({
	exClassName: &quot;group-count&quot;
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);


avatar.render(arg.dom);
name.render(arg.dom);
count.render(arg.dom);
description.render(arg.dom);
$(arg.dom).find(&quot;.group-count&quot;).attr(&quot;id&quot;, &quot;group-count-&quot; + arg.data.entityId)
</ClientEvent>
                  <Property name="dataSet">dsActiveGroup</Property>
                  <Property name="property">name</Property>
                  <Property name="hideMode">display</Property>
                  <Property name="highlightHoverRow">false</Property>
                </DataListBox>
                <DataListBox id="userResult">
                  <ClientEvent name="onDataRowClick" signature="self,arg,dsUser,dsPLG,activeGroupList,userResult,updateActionActiveGroup,dsActiveGroup">var receiver = dsUser.getData(&quot;#&quot;);
var groups = dsActiveGroup.getData();
var group = null;
groups.each(function(g) {
	if (g.get(&quot;other.memberId&quot;) === receiver.get(&quot;username&quot;)) {
		group = g;
		return false;
	}	
});
if (group) {
	if (groups.getFirst() !== group) {
		groups.insert(group, &quot;begin&quot;);
		group.setState(dorado.Entity.STATE_NONE);
	}
} else {
	dsPLG.set(&quot;parameter&quot;, {
		memberId: &quot;${loginUsername}&quot;,
		otherId: receiver.get(&quot;username&quot;)
	}).flushAsync(function(data) {
		if (data) {
			group = groups.insert(data.toJSON(), &quot;begin&quot;);
			group.setState(dorado.Entity.STATE_NONE);
		} else {
			var group = groups.insert({
				privateLetter: true,
				memberCount: 2,
				creator: &quot;${loginUsername}&quot;,
				other: {
					memberId: receiver.get(&quot;username&quot;),
					nickname: receiver.get(&quot;nickname&quot;),
					active: true
				}
			}, &quot;begin&quot;);
			group.createChild(&quot;members&quot;, {
				memberId: &quot;${loginUsername}&quot;,
				nickname: &quot;${loginUser.nickname}&quot;,
				active: true
			});
			group.createChild(&quot;members&quot;, {
				memberId: receiver.get(&quot;username&quot;),
				nickname: receiver.get(&quot;nickname&quot;),
				active: true
			});
			updateActionActiveGroup.execute();
					
		}
	});
}

activeGroupList.set(&quot;visible&quot;, true);
userResult.set(&quot;visible&quot;, false);
</ClientEvent>
                  <ClientEvent name="onRenderRow">$(arg.dom).empty();
var n = arg.data.get(&quot;nickname&quot;);
var d = arg.data.get(&quot;username&quot;);

var avatar = new dorado.widget.Control({
	exClassName: &quot;group-avatar&quot;
});
var name = new dorado.widget.Control({
	exClassName: &quot;group-name&quot;,
	tip: n
});
var description = new dorado.widget.Control({
	exClassName: &quot;group-description&quot;,
	tip: d
});

$(avatar.getDom()).text(n[0].toLocaleUpperCase());
$(name.getDom()).text(n);
$(description.getDom()).text(d);


avatar.render(arg.dom);
name.render(arg.dom);
description.render(arg.dom);</ClientEvent>
                  <Property name="dataSet">dsUser</Property>
                  <Property name="property">nickname</Property>
                  <Property name="visible">false</Property>
                  <Property name="hideMode">display</Property>
                  <Property name="highlightHoverRow">false</Property>
                </DataListBox>
              </Container>
            </SideControl>
          </SplitPanel>
          <UpdateAction id="updateActionActiveGroup">
            <Property name="dataResolver">groupController#save</Property>
            <UpdateItem>
              <Property name="dataSet">dsActiveGroup</Property>
            </UpdateItem>
          </UpdateAction>
          <UpdateAction id="updateActionGroup">
            <Property name="dataResolver">groupController#save</Property>
            <UpdateItem>
              <Property name="dataSet">dsGroup</Property>
            </UpdateItem>
          </UpdateAction>
          <AjaxAction id="ajaxActionMarkRead"/>
        </Container>
      </Children>
      <Tools/>
    </Dialog>
  </View>
</ViewConfig>
